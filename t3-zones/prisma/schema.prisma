generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Service {
  id   Int    @id @default(autoincrement())
  name String
  url  String
}

model region {
  region String
  active Boolean
  lambda String
  id     Int     @id @default(autoincrement())
}

model serviceregion {
  serviceid BigInt
  regionid  BigInt
  active    Boolean
  id        Int     @id(map: "service_region_pkey") @default(autoincrement())
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model serviceregionlog {
  serviceregionid BigInt
  ms              Int
  status_code     Int

  @@ignore
}
